@model Quintessence.QPlanet.ViewModel.Dim.EditDictionaryIndicatorModel
@{
    Layout = "~/Views/Shared/_DetailLayout.cshtml";
    ViewBag.Title = "Admin - Edit dictionary indicator";
}
@section DetailAreaNavigation
{
    <nav class="area">
        <ul>
            <li class="current"><a href="javascript:void(0);">@Model.Name</a></li>
        </ul>
    </nav>
}
@section DetailActionNavigation
{
    <nav class="action">
        <ul>
            <li class="current">Indicator Detail</li>
        </ul>
    </nav>
}
@section AdditionalScripts
{
    <script src="@Url.Content("~/Scripts/jquery.dataTables.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.treeTable.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.cookie.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/persist.js")" type="text/javascript"></script>

    <script>
        $(function () {
            $('#DictionaryTable').treeTable({ persist: true });

            InitializeButtons();

            if (0 != parseInt($('#DictionaryNumberOfUsages').attr('data-value'))) {
                AddNotification('DICUSAGES', 'There are @(Model.DictionaryNumberOfUsages) project(s) using this dictionary. Editing this indicator may render those project corrupt!');
            }

            if ('true' == $('#DictionaryIsLive').attr('data-value')) {
                AddNotification('DICISLIVE', 'The dictionary to which this indicator belongs marked as Live and is being used in production. Editing this indicator may render those project corrupt!');
            }
        });

        function InitializeButtons() {
            $('a[data-function=SaveDictionaryIndicator]').click(function (event) {
                ShowDetailSaveDialog();

                event.preventDefault();

                var form = $('form');

                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    dataType: 'JSON',
                    success: function () {
                        window.location.reload();
                    },
                    error: function (err) {
                        alert(err.responseText);
                        HideDetailSaveDialog();
                        ShowDetailErrorDialog('Save dictionary indicator', err);
                    }
                });
            });

            $(this).on('click', 'a[data-function=DeleteDictionaryIndicatorButton]', null, function (event) {
                event.preventDefault();

                if (!confirm('Are you sure you want to delete this indicator?'))
                    return;
            });

            $('input[type=checkbox][data-function=MarkAsStandard]').change(function (event) {
                event.preventDefault();
                $('input[type=checkbox][data-function=MarkAsDistinctive]').each(function() {
                    $(this).attr('checked', false);
                });
            });

            $('input[type=checkbox][data-function=MarkAsDistinctive]').change(function (event) {
                event.preventDefault();
                $('input[type=checkbox][data-function=MarkAsStandard]').each(function () {
                    $(this).attr('checked', false);
                });
            });
        }
    </script>
}

<div class="grid_8">
    <fieldset>
        <legend>@(Model.Name.Length > 50 ? Model.Name.Substring(0, 50) + "..." : Model.Name)</legend>

        <div id="DictionaryNumberOfUsages" data-value="@(Model.DictionaryNumberOfUsages)">
        </div>
        <div id="DictionaryIsLive" data-value="@(Model.DictionaryIsLive.ToString().ToLowerInvariant())">
        </div>

        <div class="row">
            <div>Dictionary</div>
            <div>@Html.ActionLink(Model.DictionaryName, "EditDictionary", new { id = Model.DictionaryId }, new { target = Model.DictionaryId, title = "Click to edit" })
            </div>
        </div>

        <div class="row">
            <div>Cluster</div>
            <div>@Html.ActionLink(Model.DictionaryClusterName, "EditDictionaryCluster", new { id = Model.DictionaryClusterId }, new { target = Model.DictionaryId, title = "Click to edit" })
            </div>
        </div>

        <div class="row">
            <div>Competence</div>
            <div>@Html.ActionLink(Model.DictionaryCompetenceName, "EditDictionaryCompetence", new { id = Model.DictionaryCompetenceId }, new { target = Model.DictionaryId, title = "Click to edit" })
            </div>
        </div>

        <div class="row">
            <div>Level</div>
            <div>@Html.ActionLink(string.Format("{0} {1}", Model.DictionaryLevelLevel, Model.DictionaryLevelName.Length > 30 ? Model.DictionaryLevelName.Substring(0, 30) + "..." : Model.DictionaryLevelName), "EditDictionaryLevel", new { id = Model.DictionaryLevelId }, new { target = Model.DictionaryId, title = "Click to edit" })
            </div>
        </div>

        @using (Html.BeginForm())
        {
            @Html.EditorFor(m => m, "BaseEntityViewTemplate")
            <div class="row">
                <div>@Html.DisplayNameFor(m => m.Name)</div>
                <div>@Html.TextAreaFor(m => m.Name, 4, 40, null)</div>
            </div>
            <div class="row">
                <div>@Html.DisplayNameFor(m => m.Order)</div>
                <div>@Html.EditorFor(m => m.Order)</div>
            </div>
            <div class="row">
                <div>&nbsp;</div>
                <div>
                    <label>
                        @Html.CheckBoxFor(m => m.IsStandard, new { data_function = "MarkAsStandard" })
                        @Html.DisplayNameFor(m => m.IsStandard)
                    </label>
                </div>
            </div>
            <div class="row">
                <div>&nbsp;</div>
                <div>
                    <label>
                        @Html.CheckBoxFor(m => m.IsDistinctive, new { data_function = "MarkAsDistinctive" })
                        @Html.DisplayNameFor(m => m.IsDistinctive)
                    </label>
                </div>
            </div>
            <div class="row"></div>
    
            <div class="right-text">
                <a href="javascript:void();" data-function="SaveDictionaryIndicator" class="button">Save</a>
            </div>

            if (Model.DictionaryIndicatorTranslations != null)
            {
                for (int i = 0; i < Model.DictionaryIndicatorTranslations.Count; i++)
                {
                    @Html.EditorFor(m => m.DictionaryIndicatorTranslations[i], "BaseEntityViewTemplate")
                    <b>@Model.DictionaryIndicatorTranslations[i].LanguageName</b>
                    <div class="row">
                        <div>@Html.DisplayNameFor(m => m.DictionaryIndicatorTranslations[i].Text)</div>
                        <div>@Html.TextAreaFor(m => m.DictionaryIndicatorTranslations[i].Text, 4, 40, null)</div>
                    </div>
                    <div class="row"></div>
                }
            }

            <div class="right-text">
                <a href="javascript:void();" data-function="SaveDictionaryIndicator" class="button">Save</a>
            </div>
        }
    </fieldset>
</div>
