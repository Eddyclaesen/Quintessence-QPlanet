@model Quintessence.QPlanet.ViewModel.Prm.EditProjectRoleModel
@{
    Layout = "~/Views/Shared/_DetailLayout.cshtml";
    ViewBag.Title = "Admin - Project - Edit project role";
}
@section DetailAreaNavigation
{
    <nav class="area">
        <ul>
            <li class="current"><a href="javascript:void(0);">
                @Model.Name
            </a>
            </li>
        </ul>
    </nav>
}
@section LeftNavigation
{
    <ul id="Tabs">
        <li><a href="#ProjectRoleDetail"></a></li>
        @if (ViewContext.RouteData.Values["action"].ToString().ToLower().Contains("edit"))
        {
            <li><a href="#ProjectRoleDictionaryLevels"></a></li>
            <li><a href="#ProjectRoleTranslations"></a></li>
        }
    </ul>
}
@section DetailActionNavigation
{
    <nav class="action">
        <ul>
            <li class="current">
                @if (ViewContext.RouteData.Values["action"].ToString().ToLower().Contains("edit"))
                {
                    @:Edit
                }
                else
                {
                    @:Create
                }
            </li>
        </ul>
    </nav>
}
@section AdditionalScripts
{
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.treeview.js")"></script>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/themes/base/jquery.treeview.css")" />
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.treeTable.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.cookie.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Persist.js")"></script>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/themes/base/jquery.treeTable.css")" />
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.dataTables.js")"></script>

    <script type="text/javascript">
        $(function () {
            InitializeButtons();
            InitializeContactNameLink();
            InitializeContactNameAutocomplete();
            InitializeChangeContactNameLink();
            InitializeProjectRoleDictionaryLevelsPartial();
            InitializeCheckboxes();

            RefreshProjectRoleDictionaryLevelsPartial();

            InitializeAddDictionaryLevelDialog();

            $(window).unload(function () {
                window.opener.location.reload();
            });

        });

        function InitializeButtons() {
            $('a[data-function=SubmitFormButtonLink]').click(function () {
                ShowDetailSaveDialog();

                var form = $('#EditProjectRoleForm');
                form.submit();
            });

            $('#AddDictionaryLevels2ProjectRoleButtonLink').click(function () {
                ShowDetailSaveDialog();
                $.ajax({
                    url: $('#LinkProjectRoleDictionaryLevelsForm').attr('action'),
                    type: 'POST',
                    data: $('#LinkProjectRoleDictionaryLevelsForm').serialize(),
                    success: function () {
                        HideDetailSaveDialog();
                        $('#AddDictionaryLevelDialog').dialog('close');
                        RefreshProjectRoleDictionaryLevelsPartial();

                    },
                    error: function (msg) {
                        alert(msg.statusText);
                        HideDetailSaveDialog;
                    }
                });
            });

            $('#AddDictionaryLevelLink').click(function () {
                $('#AddDictionaryLevelDialog').dialog('open');
                $('#AllDictionaryLevelsTreeviewPlaceholder').loading('Loading the dictionaries...');

                $.ajax({
                    url: '@Url.Action("DictionaryLevels")/@Model.Id',
                    success: function (html) {
                        $('#AllDictionaryLevelsTreeviewPlaceholder').css('height', '400px');
                        $('#AllDictionaryLevelsTreeviewPlaceholder').html('');
                        $('#AllDictionaryLevelsTreeviewPlaceholder').html(html).fadeIn();
                        $('#AllDictionaryLevelsTreeTable').treeTable({
                            persist: true
                        });

                    },
                    error: function (msg) {
                        alert(msg.statusText);
                    }
                });
            });
        }

        function InitializeContactNameLink() {
            if ($('#@Html.IdFor(m => m.ContactId)').val() != "") {
                $('#ContactName').hide();
                $('#ChangeContactNameLink').text($('#ContactName').val());
                $('#ChangeContactNameLink').show();
            } else {
                $('#ContactName').show();
                $('#ChangeContactNameLink').hide();
            }

        }

        function InitializeContactNameAutocomplete() {
            $("#ContactName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '@Url.Action("SearchContact")/' + request.term,
                        data: request,
                        dataType: "json",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.label,
                                    value: item.label,
                                    id: item.value
                                };
                            }));
                        }
                    });
                },
                select: function (event, ui) {
                    $('#ContactId').val(ui.item.id);
                    $('#ContactName').hide();
                    $('#ChangeContactNameLink').text(ui.item.label);
                    $('#ChangeContactNameLink').show();
                }
            });
        }

        function InitializeChangeContactNameLink() {
            $('#ChangeContactNameLink').click(function () {
                $('#ContactId').val(null);
                $('#ContactName').val(null);
                $('#ChangeContactNameLink').hide();
                $('#ContactName').show();
                $('#ContactName').focus();
            });
        }

        function InitializeProjectRoleDictionaryLevelsPartial() {

            $(this).on('click', 'a[data-function=UnlinkProjectRoleDictionaryLevel]', null, function () {
                if (!confirm("Are you sure you want to delete this competence for this project role?"))
                    return;
                ShowDetailSaveDialog();
                $.ajax({
                    url: '@Url.Action("UnlinkProjectRoleDictionaryLevel")/' + $(this).attr('data-projectroleid') + '/' + $(this).attr('data-dictionarylevelid'),
                    type: 'GET',
                    success: function (msg) {
                        RefreshProjectRoleDictionaryLevelsPartial();
                        HideDetailSaveDialog();
                    },
                    error: function (msg) {
                        alert(msg.statusText);
                        HideDetailSaveDialog();
                    }
                });
            });
            }

            function InitializeCheckboxes() {
                $(this).on('change', 'input[data-function=IsStandardCheckBox]', null, function () {
                    if ($(this).attr('checked') == 'checked') {
                        $.ajax({
                            url: '@Url.Action("MarkDictionaryIndicatorAsStandard")/' + $(this).attr('data-projectroleid') + '/' + $(this).attr('data-dictionaryindicatorid'),
                            error: function (err) {
                                alert(err.statusText);
                            }
                        });
                    } else {
                        $.ajax({
                            url: '@Url.Action("DeleteProjectRoleDictionaryIndicator")/' + $(this).attr('data-projectroleid') + '/' + $(this).attr('data-dictionaryindicatorid'),
                            error: function (err) {
                                alert(err.statusText);
                            }
                        });
                    }
                });
                $(this).on('change', 'input[data-function=IsDistinctiveCheckBox]', null, function () {
                    if ($(this).attr('checked') == 'checked') {
                        $.ajax({
                            url: '@Url.Action("MarkDictionaryIndicatorAsDistinctive")/' + $(this).attr('data-projectroleid') + '/' + $(this).attr('data-dictionaryindicatorid'),
                            error: function (err) {
                                alert(err.statusText);
                            }
                        });
                    } else {
                        $.ajax({
                            url: '@Url.Action("DeleteProjectRoleDictionaryIndicator")/' + $(this).attr('data-projectroleid') + '/' + $(this).attr('data-dictionaryindicatorid'),
                            error: function (err) {
                                alert(err.statusText);
                            }
                        });
                    }
                });
            }

            function RefreshProjectRoleDictionaryLevelsPartial() {
                $('#projectRoleDictionaryLevelsPlaceholder').hide().html('<p class="loading"><img src="@Url.Content("~/Images/loading_animation.gif")" /><br />Loading the Quintessence dictionaries...</p>').fadeIn();
                $.ajax({
                    url: '@Url.Action("ProjectRoleDictionaryLevels", "AdminProject", new { area = "Admin", id = @Model.Id })',
                    success: function (msg) {
                        $('#projectRoleDictionaryLevelsPlaceholder').html(msg);
                        $('#ProjectRoleDictionaryLevelTree').treeTable({ persist: true }).expandAll();
                    }
                });
            }

            function InitializeAddDictionaryLevelDialog() {
                $('#AddDictionaryLevelDialog').dialog(
                    {
                        autoOpen: false,
                        modal: true, resizable: false,
                        width: 650,
                        height: 500,
                        title: 'Add dictionary level(s)'
                    });
            }

    </script>
}

@using (Html.BeginForm(ViewContext.RouteData.Values["action"].ToString(), "AdminProject", FormMethod.Post, new { id = "EditProjectRoleForm" }))
{
    @Html.EditorFor(m => m, "BaseEntityViewTemplate")
    <fieldset id="ProjectRoleDetail">
        <legend>Edit Project Role</legend>

        <div class="container_12 nomargin">
            <div class="grid_5 table">
                <div class="label">
                    @Html.DisplayNameFor(m => m.Name)
                </div>
            </div>
            <div class="grid_7 table">
                <div class="value">@Html.EditorFor(m => m.Name)</div>
            </div>
            <div class="clear"></div>
            <div class="prefix_5 grid_7">@Html.ValidationMessageFor(m => m.Name)</div>
            <div class="clear"></div>

            @if (Model.IsContactRequired)
            {
                <div class="grid_5 table">
                    <div class="label">@Html.DisplayNameFor(m => m.ContactName)</div>
                </div>
                
                <div class="grid_7 table">
                    <div class="value">
                        @Html.HiddenFor(m => m.ContactId)
                        @Html.EditorFor(m => m.ContactName)
                        <a href="javascript:void(0);" id="ChangeContactNameLink" title="Click on this link to change the contact">
                        </a>
                    </div>
                </div>
                <div class="clear"></div>
                <div class="prefix_5 grid_7">@Html.ValidationMessageFor(m => m.ContactName)</div>
            }
            <div class="clear"></div>

            <div class="right-text">
                <a href="javascript:void(0);" data-function="SubmitFormButtonLink" class="button">Save</a>
            </div>
        </div>
    </fieldset>
    
            if (ViewContext.RouteData.Values["action"].ToString().ToLower().Contains("edit"))
            {
    <fieldset id="ProjectRoleDictionaryLevels">
        <legend>Dictionary Levels
        </legend>
        <div id="projectRoleDictionaryLevelsPlaceholder"></div>
        <div class="clear"></div>

        <div style="text-align: right">
            <a href="javascript:void;" id="AddDictionaryLevelLink" class="button">Add</a>
        </div>
    </fieldset>
    
    <fieldset id="ProjectRoleTranslations">
        <legend>Translations</legend>

        @for (int i = 0; i < Model.ProjectRoleTranslations.Count; i++)
        {
            <div class="row">
                <div>@Model.ProjectRoleTranslations[i].LanguageName</div>
                <div>
                    @Html.EditorFor(m => m.ProjectRoleTranslations[i], "BaseEntityViewTemplate")
                    @Html.TextAreaFor(m => m.ProjectRoleTranslations[i].Text, 10, 80, null)
                </div>
            </div>
        }

        <br />
        <br />

        <div class="right-text">
            <a href="javascript:void(0);" data-function="SubmitFormButtonLink" class="button">Save</a>
        </div>
    </fieldset>
            }
}

<div id="AddDictionaryLevelDialog">
    @using (Html.BeginForm("LinkProjectRoleDictionaryLevels", "AdminProject", new { area = "Admin" }, FormMethod.Post, new { id = "LinkProjectRoleDictionaryLevelsForm" }))
    {
            
        <div id="AllDictionaryLevelsTreeviewPlaceholder" class="scrollable">
        </div>
        <div class="right-text">
            <a href="javascript:void;" id="AddDictionaryLevels2ProjectRoleButtonLink" class="button">
                Add selected</a>
        </div>
    }
</div>

