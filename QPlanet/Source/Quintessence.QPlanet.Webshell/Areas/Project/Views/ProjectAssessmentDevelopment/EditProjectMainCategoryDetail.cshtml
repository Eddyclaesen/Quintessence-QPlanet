@using Quintessence.QPlanet.Infrastructure.Web
@using Quintessence.QPlanet.ViewModel.Prm.ProjectCategoryDetail
@using Quintessence.QPlanet.ViewModel.Prm.ProjectCategoryDetail.Interfaces
@model EditProjectCategoryDetailModelBase
@{
    Layout = "~/Views/Shared/_DetailLayout.cshtml";
    ViewData["ProjectId"] = Model.ProjectId;
    ViewBag.Title = "Projects - Edit Main Category";
}
@section DetailAreaNavigation
{
    <nav class="area">
        <ul>
            <li class="current"><a href="javascript:void(0);">@Model.ProjectName</a></li>
        </ul>
    </nav>
}
@section DetailActionNavigation
{
    <nav class="action">
        <ul>
            <li>
                @Html.ActionLink("Detail", "Edit", "ProjectGeneral", new RouteValueDictionary(new { area = "Project", id = Model.ProjectId }), null)
            </li>
            <li class="current">@Model.ProjectTypeCategoryName</li>

            @if (Model.ProjectHasSubProjectCategoryDetails)
            {
                <li>
                    @Html.ActionLink("Subcategories", "SubProjectCategoryDetails", "ProjectAssessmentDevelopment", new { area = "Project", id = Model.ProjectId }, null)
                </li>
            }
            <li>
                @Html.ActionLink("Candidates", "EditProjectCandidates", "ProjectAssessmentDevelopment", new RouteValueDictionary(new { area = "Project", id = Model.ProjectId }), null)
            </li>
            <li>
                @Html.ActionLink("Invoicing", "InvoiceOverview", "ProjectAssessmentDevelopment", new { area = "Project", id = Model.Id }, null)
            </li>
        </ul>
    </nav>
}
@{
    var indicatorSelectionModel = Model as IIndicatorSelectionModel;
    var simulationSelectionModel = Model as ISimulationSelectionModel;
    var roleSelectionModel = Model as IRoleSelectionModel;
}
@section LeftNavigation
{
    <ul id="Tabs">
        @if (indicatorSelectionModel != null)
        {
            <li><a href="#SelectedCompetenceIndicators"></a></li>

        }
        @if (roleSelectionModel != null)
        {
            <li><a href="#SelectedRoles"></a></li>
        }
        @if (simulationSelectionModel != null)
        {
            <li><a href="#SelectedSimulationCombinations">Simulation Combinations</a></li>
            <li>
                <a href="#DictionarySimulationMatrix">
                    Matrix
                    @if ((bool)Session["Roi"])
                    {
                        <text>- ROI</text>
                    }
                </a>
            </li>
        }
        <li><a href="#CustomerFeedback"></a></li>
    </ul>
    <div id="ProjectRemarks"></div>
    <div id="MatrixCountRemarks"></div>
}
@section AdditionalScripts
{
    <script src="@Url.Content("~/Scripts/jquery.dataTables.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.treeTable.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/persist.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.cookie.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.dataTables.columnFilter.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/tiny_mce/jquery.tinymce.js")" type="text/javascript"></script>
    <script src="@Url.Content("https://cdn.datatables.net/rowreorder/1.2.7/js/dataTables.rowReorder.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.tablednd.js")" type="text/javascript"></script>

    <script type="text/javascript">
        $(function () {
            InitializeButtons();
            RefreshCandidateReportingTable();
            RefreshCustomerFeedback();
            RefreshProjectReportRecipients();
            ValidateProject();
            CheckUnregisteredCandidatesForProject();
        });

        function ValidateProject() {
            RemoveNotification('ValidateProject');
            $.getJSON('@Url.Action("ValidateProject", new { id = Model.ProjectId })', function (data) {
                $.each(data, function (key, val) {
                    if (val.message != 'ok') {
                        AddNotification('ValidateProject', val.message);
                    }
                });
            });
        }

        function CheckUnregisteredCandidatesForProject() {
            RemoveNotification('CheckUnregisteredCandidates');
            //Check if there are still unregistered candidates for this project
            $.getJSON('@Url.Action("CheckUnregisteredCandidatesForProject", new { id = Model.ProjectId })', function (data) {
                $.each(data, function (key, val) {
                    if (val.message != 'ok') {
                        AddNotification('CheckUnregisteredCandidates', val.message);
                    }


                });
            });
        }

        function InitializeButtons() {
            $(this).on('click', '#AddProjectReportRecipientsButton', function (e) {
                $('#AddProjectReportRecipientsDialog').dialog('open');
                $('#CrmProjectEmailsPlaceholder').load('@Url.Action("ListCrmEmails", new { id = Model.ProjectContactId })', function () {
                    $('#SelectCrmEmailsDataTable').dataTable();
                });
            });

            //See DeleteProjectReportRecipient button on ProjectReportRecipients.cshtml
            $(this).on('click', 'a[data-id=DeleteProjectReportRecipient]', null, function () {
                ShowDetailSaveDialog();
                $.get('@Url.Action("DeleteProjectReportRecipient")/' + $(this).attr('data-report-recipient-id'), function () {
                    HideDetailSaveDialog();
                    RefreshProjectReportRecipients();
                });
            });

            $('#SubmitCandidateReportingButton').click(function () {
                var form = $('#CandidateReportingForm');

                ShowDetailSaveDialog();
                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    dataType: 'JSON',
                    success: function () {
                        window.location.reload();
                    },
                    error: function (err) {
                        HideDetailSaveDialog();
                        alert(err.statusText);
                    }
                });
            });

            $('#RefreshCandidateReportingButton').click(function () {
                RefreshCandidateReportingTable();
            });

            $(this).on('click', '#AddSelectedProjectReportRecipientsSubmitButton', function (e) {
                e.preventDefault();
                var form = $('#AddProjectReportRecipientsForm');
                ShowDetailSaveDialog();
                $.ajax({
                    url: form.attr('action') + '/@Model.ProjectId',
                    type: 'POST',
                    data: form.serialize(),
                    success: function (data) {
                        HideDetailSaveDialog();
                        $('#AddProjectReportRecipientsDialog').dialog('close');
                        RefreshProjectReportRecipients();
                        return false;
                    },
                    error: function (x, y, z) {
                        alert(x.responseText);
                    }
                });
            });
        }

        function RefreshCandidateReportingTable() {
            $('#CandidateReportingPlaceholder').loading('Loading reporting...');
            $.ajax({
                url: '@Url.Action("CustomerFeedbackReporting", "ProjectAssessmentDevelopment", new { area = "Project", Id = @Model.ProjectId })',
                success: function (html) {
                    $('#CandidateReportingPlaceholder').html(html);
                    $('#CandidateReportingTable').treeTable({ persist: true });
                    $('#ReportDefinitionTable').dataTable();
                },
                error: function (err) {
                    $('#CandidateReportingPlaceholder').html('');
                    alert(err.statusText);
                }
            });
        }

        function RefreshProjectReportRecipients() {
            $('#ProjectReportRecipientsPlaceholder').loading('Loading report recipients...');
            $.ajax({
                url: '@Url.Action("ProjectReportRecipients", new { id = Model.ProjectId })',
                type: 'GET',
                success: function (msg) {
                    $('#ProjectReportRecipientsPlaceholder').html(msg);
                    $('#ProjectReportRecipientsDataTable').dataTable();
                    $('#AddProjectReportRecipientsDialog').dialog(
                        {
                            autoOpen: false,
                            modal: true,
                            resizable: false,
                            width: 950,
                            height: 725,
                            title: 'Add report recipients'
                        });
                }
            });
        }

        function RefreshCustomerFeedback() {
            $('#CustomerFeedbackPlaceholder').loading('Loading customer feedback...');
            $.ajax({
                url: '@Url.Action("CustomerFeedback", new { id = Model.ProjectId })',
                type: 'GET',
                success: function (msg) {
                    $('#CustomerFeedbackPlaceholder').html(msg);
                    InitializeCustomerFeedbackButtons();
                    InitializeCustomerFeedbackTextAreas();
                }
            });

        }

        function InitializeCustomerFeedbackButtons() {
            $(this).on('click', '#SaveCustomerFeedbackButton', null, function () {
                var form = $('#CustomerFeedbackForm');
                ShowDetailSaveDialog();
                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function () {
                        HideDetailSaveDialog();
                    },
                    error: function (err) {
                        HideDetailSaveDialog();
                        ShowDetailErrorDialog('Save customer feedback.', err);
                    }
                });
            });
        }

        function InitializeCustomerFeedbackTextAreas() {
            $('#CustomerFeedbackForm textarea').each(function () {
                $(this).tinymce({
                    script_url: '@Url.Content("~/Scripts/tiny_mce/tiny_mce.js")',
                    height: '200',
                    width: '600',
                    theme: 'simple',
                    valid_styles: { '*': 'font-weight,text-decoration' }
                });
            });
        }

    </script>


    @if (indicatorSelectionModel != null)
    {
<script>
            $(function () {
                InitializeIndicatorSelectionDialogs();

                RefreshSelectedIndicatorTable();

                InitializeIndicatorSelectionButtons();
            });

            function InitializeIndicatorSelectionDialogs() {
                $('#SelectIndicatorDialog').dialog(
                    {
                        autoOpen: false,
                        modal: true,
                        resizable: false,
                        width: 850,
                        height: 725,
                        title: 'Add new indicators'
                    });
            }

            function RefreshSelectedIndicatorTable() {
                $('#SelectedIndicatorTablePlaceholder').loading('Retrieving selected indicators...');
                var url = '@Url.Action("SelectedIndicators", new { id = Model.Id })';

                $.ajax({
                    url: url,
                    success: function (html) {
                        $('#SelectedIndicatorTablePlaceholder').html(html);
                    },
                    error: function (err) {
                        var message = 'Unable to retrieve selected indicators: ' + err.statusText;
                        $('#SelectedIndicatorTablePlaceholder').showErrorMessage(message);
                    }
                });
            }

            function InitializeIndicatorSelectionButtons() {
                $(this).on('click', 'a[data-function=AddSelectedIndicatorButton]', null, function () {
                    $('#SelectNewIndicatorTablePlaceholder').loading('Loading Dictionary tree...');
                    $('#SelectIndicatorDialog').dialog('open');
                    $.ajax({
                        url: '@Url.Action("DictionaryIndicators")/@indicatorSelectionModel.Project.DictionaryId',
                        type: 'GET',
                        success: function (html) {
                            $('#SelectNewIndicatorTablePlaceholder').html(html);
                            $('#SelectNewIndicatorTable').treeTable({ persist: true });
                        },
                        error: function (err) {
                            ShowDetailErrorDialog('Loading dictionary tree', err);
                        }
                    });
                });

                $(this).on('click', 'a[data-function=RemoveSelectedIndicators]', null, function () {
                    ShowDetailSaveDialog();
                    $("#SelectedIndicatorTable input[type=checkbox]:checked").each(function () {
                        $.ajax({
                            url: '@Url.Action("RemoveDictionaryIndicator")/' + this.id,
                            success: function (msg) {

                            },
                            error: function (err) {
                                var message = 'Unable to remove the selected indicators: ' + err.statusText;
                                alert(message);
                            }
                        });
                    });

                    setTimeout(function () {
                        RefreshCompetenceSimulationMatrix();
                        HideDetailSaveDialog();
                        RefreshSelectedIndicatorTable();
                    }, 4000);
                });

                $(this).on('click', 'a[data-function=RefreshSelectedIndicatorButton]', null, function () {
                    RefreshSelectedIndicatorTable();
                });

                $(this).on('change', 'input[type=checkbox][data-function=DictionaryLevelCheckBox]', null, function () {
                    if ($(this).is(':checked')) {
                        $('input[data-levelid=' + $(this).attr('data-id') + ']').each(function () {
                            $(this).attr('checked', 'checked');
                        });
                    } else {
                        $('input[data-levelid=' + $(this).attr('data-id') + ']').each(function () {
                            $(this).removeAttr('checked');
                        });
                    }
                });

                $('#CancelSelectedIndicatorButton').click(function () { $('#SelectIndicatorDialog').dialog('close'); });
                $('#ConfirmSelectedIndicatorButton').click(function () {
                    ShowDetailSaveDialog();
                    $('#SelectIndicatorDialog').dialog('close');

                    var checkedDictionaryIndicatorIds = new Array();

                    $('input[type=checkbox][data-function=AddDictionaryIndicatorId]').each(function () {
                        if ($(this).is(':checked')) {
                            checkedDictionaryIndicatorIds.push($(this).attr('data-indicatorid'));
                        }
                    });

                    var jsonArray = {};
                    for (i in checkedDictionaryIndicatorIds) {
                        jsonArray[i] = checkedDictionaryIndicatorIds[i];
                    }
                    var json = { selectedIndicatorIds: jsonArray };

                    $.ajax({
                        url: '@Url.Action("AddDictionaryIndicators")/@Model.Id',
                        type: 'POST',
                        data: json,
                        dataType: 'JSON',
                        success: function (msg) {
                            RefreshSelectedIndicatorTable();
                            RefreshCompetenceSimulationMatrix();
                            HideDetailSaveDialog();
                        },
                        error: function (err) {
                            var message = 'Unable to add the selected indicators: ' + err.statusText;
                            alert(message);
                        }
                    });
                });

                $(this).on('click', 'a[data-function=DeleteSelectedIndicator]', null, function () {
                    ShowDetailSaveDialog();
                    $.ajax({
                        url: '@Url.Action("RemoveDictionaryIndicator")/' + $(this).attr('data-id'),
                        success: function (msg) {
                            RefreshSelectedIndicatorTable();
                            RefreshCompetenceSimulationMatrix();
                            HideDetailSaveDialog();
                        },
                        error: function (err) {
                            var message = 'Unable to remove the selected indicators: ' + err.statusText;
                            alert(message);
                        }
                    });
                });
                }
</script>
    }
    @if (roleSelectionModel != null)
    {
        <script>
            $(function () {
                InitializeChangeProjectRoleDialog();
                InitializeLevelSelectionDialog();
                InitializeSelectedLevelCheckboxes();

                InitializeRoleSelectionModelButtons();

                RefreshSelectedLevelTable();
            });

            function RefreshSelectedLevelTable() {
                $('#SelectedLevelTablePlaceholder').loading('Retrieve selected dictionary levels...');
                $.ajax({
                    url: '@Url.Action("SelectedLevels", new { id = Model.Id })',
                    success: function (msg) {
                        $('#SelectedLevelTablePlaceholder').html(msg);
                        $('#SelectedLevelTable').treeTable({ persist: true });
                    },
                    error: function (err) {
                        var message = 'Unable to retrieve selected simulation: ' + err.statusText;
                        $('#SelectedSimulationTablePlaceholder').showErrorMessage(message);
                    }
                });
            }

            function InitializeLevelSelectionDialog() {
                $('#SelectLevelDialog').dialog(
                    {
                        autoOpen: false,
                        modal: true,
                        resizable: false,
                        width: 850,
                        height: 725,
                        title: 'Add new levels'
                    });
            }

            function InitializeSelectedLevelCheckboxes() {
                $(this).on('change', 'input[type=checkbox][data-function=MarkAsStandard]', null, function (event) {
                    event.preventDefault();

                    var linkId = $(this).attr('data-id');
                    var checked = $(this).is(':checked');

                    $('input[type=checkbox][data-function=MarkAsDistinctive][data-id=' + linkId + ']').each(function () {
                        $(this).attr('checked', false);
                    });

                    $.ajax({
                        url: '@Url.Action("MarkProjectCandidateDetailDictionaryIndicatorAsStandard")/' + linkId + '/' + checked,
                        success: function () { },
                        error: function (err) {
                            ShowDetailErrorDialog('Mark as standard', err);
                            RefreshSelectedLevelTable();
                        }
                    });
                });

                $(this).on('change', 'input[type=checkbox][data-function=MarkAsDistinctive]', null, function (event) {
                    event.preventDefault();

                    var linkId = $(this).attr('data-id');
                    var checked = $(this).is(':checked');

                    $('input[type=checkbox][data-function=MarkAsStandard][data-id=' + linkId + ']').each(function () {
                        $(this).attr('checked', false);
                    });

                    $.ajax({
                        url: '@Url.Action("MarkProjectCandidateDetailDictionaryIndicatorAsDistinctive")/' + linkId + '/' + checked,
                        success: function () { },
                        error: function (err) {
                            ShowDetailErrorDialog('Mark as distinctive', err);
                            RefreshSelectedLevelTable();
                        }
                    });
                });
            }

            function InitializeChangeProjectRoleDialog() {
                $('#ChangeProjectRoleDialog').dialog(
                    {
                        autoOpen: false,
                        modal: true,
                        resizable: false,
                        width: 500,
                        height: 200,
                        title: 'Select a new project role'
                    });
            }

            function InitializeRoleSelectionModelButtons() {
                $('#ChangeProjectRoleButton').click(function () {
                    $('#ChangeProjectRoleDialog').dialog('open');
                });

                $('#RemoveProjectRoleButton').click(function () {
                    ShowDetailSaveDialog();
                    $.ajax({
                        url: '@Url.Action("UnassignProjectRole")/@Model.Id',
                            type: 'POST',
                            success: function (msg) {
                                HideDetailSaveDialog();
                                window.location.reload();
                                //RefreshCompetenceSimulationMatrix();
                            },
                            error: function (err) {
                                HideDetailSaveDialog();
                                alert(err.status);
                            }
                        });
                    });

                    $('#SubmitChangeProjectRoleLink').click(function () {
                        ShowDetailSaveDialog();
                        $('#ChangeProjectRoleForm').submit();
                    });

                    $('#CancelChangeProjectRoleLink').click(function () {
                        $('#ChangeProjectRoleDialog').dialog('close');
                    });

                    $(this).on('click', 'a[data-function=AddSelectedLevelButton]', null, function () {
                        $('#SelectNewLevelTablePlaceholder').loading('Loading dictionary levels...');
                        $('#SelectLevelDialog').dialog('open');
                        $.ajax({
                            url: '@Url.Action("DictionaryLevels")/@roleSelectionModel.Project.DictionaryId',
                        type: 'GET',
                        success: function (msg) {
                            $('#SelectNewLevelTablePlaceholder').html(msg);
                            $('#SelectNewLevelTable').treeTable();
                        }
                    });
                });

                    $(this).on('click', 'a[data-function=RefreshSelectedLevelButton]', null, function () {
                        RefreshSelectedLevelTable();
                    });

                    $('#CancelSelectedLevelButton').click(function () { $('#SelectLevelDialog').dialog('close'); });
                    $('#ConfirmSelectedLevelButton').click(function () {
                        ShowDetailSaveDialog();

                        var checkedDictionaryLevels = new Array();

                        $('input[name=DictionaryLevelCheckBox]').each(function () {
                            if ($(this).attr('checked') == 'checked') {
                                checkedDictionaryLevels.push($(this).attr('data-id'));
                            }
                        });

                        var postData = { dictionaryLevelIds: checkedDictionaryLevels };

                        $.ajax({
                            url: '@Url.Action("AddDictionaryLevels", new { id = Model.Id })',
                            type: 'POST',
                            data: postData,
                            dataType: 'JSON',
                            traditional: true,
                            success: function (msg) {
                                $('#SelectLevelDialog').dialog('close');
                                HideDetailSaveDialog();
                                RefreshSelectedLevelTable();
                                RefreshCompetenceSimulationMatrix();
                            },
                            error: function (err) {
                                HideDetailSaveDialog();
                                ShowDetailErrorDialog('Add dictionary levels', err);
                            }
                        });

                    });

                    $(this).on('click', 'a[data-function=DeleteCompetenceLink]', null, function () {
                        ShowDetailSaveDialog();

                        $.ajax({
                            url: '@Url.Action("RemoveDictionaryCompetence", new { id = Model.Id })/' + $(this).attr('data-id'),
                            type: 'POST',
                            success: function (msg) {
                                HideDetailSaveDialog();
                                RefreshSelectedLevelTable();
                                RefreshCompetenceSimulationMatrix();
                            },
                            error: function (err) {
                                HideDetailSaveDialog();
                                ShowDetailErrorDialog('Remove dictionary competence', err);
                            }
                        });
                    });
                    }
        </script>
    }
    @if (simulationSelectionModel != null)
    {
        <script>
            $(function () {
                InitializeSimulationSelectionDialogs();
                InitializeSimulationRemarks();
                InitializeMatrixRemarks();

                RefreshSelectedSimulationTable();

                InitializeSimulationSelectionButtons();
                InitializeFormButtons();

                InitializeCheckBoxes();
                RefreshCompetenceSimulationMatrix();

            });

            function InitializeSimulationSelectionDialogs() {
                $('#SelectSimulationDialog').dialog(
                    {
                        autoOpen: false,
                        modal: true,
                        resizable: false,
                        width: 1000,
                        height: 725,
                        title: 'Add new simulations'
                    });
            }

            function InitializeSimulationRemarks() {
                $('#@Html.IdFor(m => m.SimulationRemarks)').tinymce({
                    script_url: '@Url.Content("~/Scripts/tiny_mce/tiny_mce.js")',
                    height: '300',
                    width: '600',
                    theme: 'simple',
                    valid_styles: { '*': 'font-weight,text-decoration' }
                });
            }

            function InitializeMatrixRemarks() {
                $('#@Html.IdFor(m => m.MatrixRemarks)').tinymce({
                    script_url: '@Url.Content("~/Scripts/tiny_mce/tiny_mce.js")',
                    height: '300',
                    width: '600',
                    theme: 'simple',
                    valid_styles: { '*': 'font-weight,text-decoration' }
                });
            }

            function RefreshSelectedSimulationTable() {
                $('#SelectedSimulationTablePlaceholder').loading('Retrieving selected simulations...');
                $.ajax({
                    url: '@Url.Action("SelectedSimulations", new { id = Model.Id })',
                    success: function (html) {
                        $('#SelectedSimulationTablePlaceholder').html(html);
                        $('#SelectedSimulationTable').dataTable({ "bPaginate": false, "bFilter": false });
                    },
                    error: function (err) {
                        var message = 'Unable to retrieve selected simulation: ' + err.statusText;
                        $('#SelectedSimulationTablePlaceholder').showErrorMessage(message);
                    }
                });
            }

            function InitializeSimulationSelectionButtons() {
                $(this).on('click', 'a[data-function=AddSelectedSimulationButton]', null, function () {
                    $('#SelectNewSimulationTablePlaceholder').loading('Loading simulations...');
                    $('#SelectSimulationDialog').dialog('open');
                    $.ajax({
                        url: '@Url.Action("Simulations")',
                        success: function (msg) {
                            $('#SelectNewSimulationTablePlaceholder').html(msg);
                            $('#SelectNewSimulationTable').dataTable({ "sScrollY": "525px" }).columnFilter();
                        }
                    });
                });

                $(this).on('click', 'a[data-function=RefreshSelectedSimulationButton]', null, function () {
                    RefreshSelectedSimulationTable();
                });

                $('#CancelSelectedSimulationButton').click(function () { $('#SelectSimulationDialog').dialog('close'); });
                $('#ConfirmSelectedSimulationButton').click(function () {
                    ShowDetailSaveDialog();


                    var checkedSimulationCombinationIds = new Array();

                    //$('input[type=checkbox][data-function=AddSimulationCombinationId]').each(function () {
                    //    if ($(this).is(':checked')) {
                    //        checkedSimulationCombinationIds.push($(this).attr('data-id'));
                    //    }
                    //});

                    $('input[type=checkbox]:checked', $('#SelectNewSimulationTable').dataTable().fnGetNodes()).each(function() {
                        checkedSimulationCombinationIds.push($(this).attr('data-id'));
                    });

                    if (checkedSimulationCombinationIds.length < 1) {
                        HideDetailSaveDialog();
                        $.alert('Please select at least 1 simulation.', 'No simulation', 300, 200);
                        return;
                    }

                    $('#SelectSimulationDialog').dialog('close');

                    var jsonArray = {};
                    for (i in checkedSimulationCombinationIds) {
                        jsonArray[i] = checkedSimulationCombinationIds[i];
                    }
                    var json = { selectedSimulationCombinationIds: jsonArray };

                    $.ajax({
                        url: '@Url.Action("AddSimulationCombinations", new { id = Model.Id })',
                        type: 'POST',
                        data: json,
                        dataType: 'JSON',
                        success: function (msg) {
                            HideDetailSaveDialog();
                            RefreshSelectedSimulationTable();
                            RefreshCompetenceSimulationMatrix();
                        },
                        error: function (err) {
                            HideDetailSaveDialog();
                            alert(err.status);
                        }
                    });
                });

                $(this).on('click', 'a[data-function=DeleteSelectedSimulation]', null, function () {
                    ShowDetailSaveDialog();
                    $.ajax({
                        url: '@Url.Action("RemoveSimulationCombination")/' + $(this).attr('data-id'),
                        success: function (msg) {
                            RefreshSelectedSimulationTable();
                            RefreshCompetenceSimulationMatrix();
                            HideDetailSaveDialog();
                        },
                        error: function (err) {
                            var message = 'Unable to remove the selected simulation: ' + err.statusText;
                            alert(message);
                        }
                    });
                });
                }

                function InitializeFormButtons() {
                    $('#SubmitSimulationRemarksButton').click(function (event) {
                        ShowDetailSaveDialog();
                        event.preventDefault();

                        $.ajax({
                            url: '@Url.Action("UpdateSimulationInformation")',
                            data: $('#UpdateSimulationInformationForm').serialize(),
                            dataType: 'JSON',
                            type: 'POST',
                            success: function () {
                                HideDetailSaveDialog();
                            },
                            error: function (err) {
                                HideDetailSaveDialog();
                                alert('Unable to save changes. Please try again or contact your system administrator.');
                            }
                        });
                    });

                    $('#SubmitMatrixRemarksButton').click(function (event) {
                        ShowDetailSaveDialog();
                        event.preventDefault();

                        $.ajax({
                            url: '@Url.Action("UpdateMatrixInformation")',
                            data: $('#UpdateMatrixInformationForm').serialize(),
                            dataType: 'JSON',
                            type: 'POST',
                            success: function () {
                                HideDetailSaveDialog();
                            },
                            error: function (err) {
                                HideDetailSaveDialog();
                                alert('Unable to save changes. Please try again or contact your system administrator.');
                            }
                        });
                    });


                }


                function InitializeCheckBoxes() {
                    $(this).on('change', 'input[name=SimulationCompetenceCheckBox]', null, function () {
                        if ($(this).attr('checked') == 'checked') {
                            $.ajax({
                                url: '@Url.Action("AddSimulationCompetence", new { id = Model.Id })/' + $(this).attr('data-competence-id') + '/' + $(this).attr('data-combination-id'),
                            type: 'POST'
                        });
                    } else {
                        $.ajax({
                            url: '@Url.Action("RemoveSimulationCompetence", new { id = Model.Id })/' + $(this).attr('data-competence-id') + '/' + $(this).attr('data-combination-id'),
                            type: 'POST'
                        });
                    }
                });
            }

            function RefreshCompetenceSimulationMatrix() {
                $('#CompetenceSimulationMatrixPlaceholder').loading('Loading the competence matrix...');
                $.ajax({
                    url: '@Url.Action("CompetenceSimulations", new { id = Model.Id })',
                    success: function (msg) {
                        $('#CompetenceSimulationMatrixPlaceholder').html(msg);
                    }
                });
            }

            function RefreshWarningMessages() {
                $('img[data-function=CompetenceWarningImage]').each(function () {
                    if ($('input[type=checkbox][name=SimulationCompetenceCheckBox][data-competence-id=' + $(this).attr('data-competenceid') + ']:checked').length < 2) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }

        </script>
    }
}
@if (indicatorSelectionModel != null)
{
    <fieldset id="SelectedCompetenceIndicators">
        <legend>Competence Indicators</legend>

        @if (!indicatorSelectionModel.Project.DictionaryId.HasValue)
        {
            <p class="field-validation-error">
                Please select a dictionary in the detail-page.
            </p>
        }
        else
        {
        <div style="text-align: right">
            <a href="javascript:void(0);" data-function="RefreshSelectedIndicatorButton" class="button">
                Refresh
            </a>
            <a href="javascript:void(0);" data-function="AddSelectedIndicatorButton" class="button">
                Add
            </a>
            <a href="javascript:void(0);" data-function="RemoveSelectedIndicators" class="button">
                Remove Selected
            </a>
        </div>
            <div id="SelectedIndicatorTablePlaceholder"></div>
            <div style="text-align: right">
                <a href="javascript:void(0);" data-function="RefreshSelectedIndicatorButton" class="button">
                    Refresh
                </a>
                <a href="javascript:void(0);" data-function="AddSelectedIndicatorButton" class="button">
                    Add
                </a>
                <a href="javascript:void(0);" data-function="RemoveSelectedIndicators" class="button">
                    Remove Selected
                </a>
            </div>

            <div id="SelectIndicatorDialog" style="display: none; width: 100%; height: 100%">
                @using (Html.BeginForm("DictionaryIndicators", "ProjectAssessmentDevelopment", FormMethod.Post, new { id = "AddSelectedIndicatorForm" }))
                {
                    <div id="SelectNewIndicatorTablePlaceholder" style="height: 625px; overflow: auto;">
                    </div>
                    <div style="text-align: right">
                        <a href="javascript:void(0);" id="ConfirmSelectedIndicatorButton" class="button">Confirm</a>
                        <a href="javascript:void(0);" id="CancelSelectedIndicatorButton" class="button">Cancel</a>
                    </div>
                }
            </div>
        }
    </fieldset>
}
@if (roleSelectionModel != null)
{
    <fieldset id="SelectedRoles">
        <legend>Role & Competences</legend>


        @if (!roleSelectionModel.Project.DictionaryId.HasValue)
        {
            <p class="field-validation-error">
                Please select a dictionary in the detail-page.
            </p>
        }
        else
        {
            <div class="container_12 nomargin">
                <div class="grid_5 table">
                    <div class="label">
                        @Html.LabelFor(m => roleSelectionModel.ProjectRoleName):&nbsp;
                        @if (roleSelectionModel.ProjectRoleId.HasValue)
                        {
                            @Html.DisplayTextFor(m => roleSelectionModel.ProjectRoleName)
                        }
                        else
                        {
                            <i>None assigned</i>
                        }
                    </div>
                </div>
                <div class="grid_6 table">
                    <div class="value">
                        <a href="javascript:void(0);" id="ChangeProjectRoleButton" title="Click to change or assign the project role."
                           class="button">
                            @if (roleSelectionModel.ProjectRoleId.HasValue)
                            {
                                @:Change
                            }
                            else
                            {
                                @:Assign
                            }
                        </a>
                        @if (roleSelectionModel.ProjectRoleId.HasValue)
                        {
                            <a href="javascript:void" id="RemoveProjectRoleButton" title="Remove the assigned project role"
                               class="button">Remove</a>
                        }
                    </div>
                </div>
                <div class="clear"></div>
            </div>

            <div style="text-align: right">
                <a href="javascript:void(0);" data-function="RefreshSelectedLevelButton" class="button">
                    Refresh
                </a>
                <a href="javascript:void(0);" data-function="AddSelectedLevelButton" class="button">
                    Add
                </a>
            </div>
            <div id="SelectedLevelTablePlaceholder"></div>
            <div style="text-align: right">
                <a href="javascript:void(0);" data-function="RefreshSelectedLevelButton" class="button">
                    Refresh
                </a>
                <a href="javascript:void(0);" data-function="AddSelectedLevelButton" class="button">
                    Add
                </a>
            </div>

            <div id="SelectLevelDialog" style="display: none; width: 100%; height: 100%">
                @using (Html.BeginForm("DictionaryLevels", "ProjectAssessmentDevelopment", FormMethod.Post, new { id = "AddSelectedLevelForm" }))
                {
                    <div id="SelectNewLevelTablePlaceholder" style="height: 625px; overflow: auto">
                    </div>
                    <div style="text-align: right">
                        <a href="javascript:void(0);" id="ConfirmSelectedLevelButton" class="button">Confirm</a>
                        &nbsp;
                        <a href="javascript:void(0);" id="CancelSelectedLevelButton" class="button">Cancel</a>
                    </div>
                }
            </div>
        }
    </fieldset>

    <div id="ChangeProjectRoleDialog">
        @using (Html.BeginForm("ChangeProjectRole", "ProjectAssessmentDevelopment", FormMethod.Post, new { id = "ChangeProjectRoleForm" }))
        {
            <p>Changing the role will remove the competence levels.</p>
            @Html.Hidden("ProjectCategoryDetailId", Model.Id)
            @Html.Hidden("ProjectId", Model.ProjectId)
            <table style="width: 100%">
                <tr>
                    <td style="width: 40%">@Html.LabelFor(m => roleSelectionModel.ProjectRoleId)</td>
                    <td style="width: 60%">
                        @Html.GroupDropDownList("ProjectRoleId", Model.ProjectRoles, "ProjectRoleId", null)
                        @*@Html.DropDownList("ProjectRoleId", Model.ProjectRoles)*@
                    </td>
                </tr>
            </table>
            <br />
            <br />

            <div style="text-align: right">
                <a href="javascript:void(0);" id="SubmitChangeProjectRoleLink" class="button">Confirm</a>
                <a href="javascript:void(0);" id="CancelChangeProjectRoleLink" class="button">Cancel</a>
            </div>
        }
    </div>
}
@if (simulationSelectionModel != null)
{
    <div id="SelectedSimulationCombinations">
        <fieldset>
            <legend>Simulation Combinations</legend>
            <div style="text-align: right">
                <a href="javascript:void(0);" data-function="RefreshSelectedSimulationButton" class="button">
                    Refresh
                </a>
                <a href="javascript:void(0);" data-function="AddSelectedSimulationButton" class="button">
                    Add
                </a>
            </div>
            <div id="SelectedSimulationTablePlaceholder"></div>
            <div style="text-align: right">
                <a href="javascript:void(0);" data-function="RefreshSelectedSimulationButton" class="button">
                    Refresh
                </a>
                <a href="javascript:void(0);" data-function="AddSelectedSimulationButton" class="button">
                    Add
                </a>
            </div>
        </fieldset>

        <fieldset>
            <legend>Simulation information</legend>

            @using (Html.BeginForm("UpdateSimulationInformation", "ProjectAssessmentDevelopment", FormMethod.Post, new { id = "UpdateSimulationInformationForm" }))
            {
                @Html.Hidden("ProjectCategoryDetailId", Model.Id)
                <div class="container_12 nomargin">
                    <div class="grid_5 table">
                        <div class="label">@Html.LabelFor(m => m.SimulationContextId)</div>
                    </div>
                    <div class="grid_7 table">
                        <div class="value">
                            @Html.DropDownList(Html.IdFor(m => m.SimulationContextId).ToString(), Model.CreateSimulationContextDropDownList(Model.SimulationContextId))
                        </div>
                    </div>
                    <div class="clear"></div>

                    <div class="grid_5 table">
                        <div class="label">@Html.LabelFor(m => m.SimulationRemarks)</div>
                    </div>
                    <div class="grid_7 table">
                        <div class="value">
                            @Html.TextAreaFor(m => m.SimulationRemarks)
                        </div>
                    </div>
                    <div class="clear"></div>

                    <div style="text-align: right">
                        <a href="javascript:void(0);" id="SubmitSimulationRemarksButton" class="button">Save</a>
                    </div>
                </div>

            }
        </fieldset>
    </div>

    <div id="SelectSimulationDialog" style="display: none; width: 100%; height: 100%">
        @using (Html.BeginForm("Simulations", "ProjectAssessmentDevelopment", FormMethod.Post, new { id = "AddSelectedSimulationForm" }))
        {
            <div id="SelectNewSimulationTablePlaceholder" style="height: 625px;">
            </div>
            <div style="text-align: right">
                <a href="javascript:void(0);" id="ConfirmSelectedSimulationButton" class="button">Confirm</a>
                &nbsp;
                <a href="javascript:void(0);" id="CancelSelectedSimulationButton" class="button">Cancel</a>
            </div>
        }
    </div>

    <div id="DictionarySimulationMatrix">
        <fieldset>
            <legend>
                Matrix
                @if ((bool)Session["Roi"])
                {
                    <text>- ROI</text>
                }
            </legend>

            <div id="CompetenceSimulationMatrixPlaceholder"></div>

        </fieldset>

        <fieldset>
            <legend>Matrix information</legend>

            @using (Html.BeginForm("UpdateMatrixInformation", "ProjectAssessmentDevelopment", FormMethod.Post, new { id = "UpdateMatrixInformationForm" }))
            {
                @Html.Hidden("ProjectCategoryDetailId", Model.Id)

                <div class="row">
                    <div>@Html.DisplayNameFor(m => m.ScoringTypeCode)</div>
                    <div>
                        @Html.DropDownListFor(m => m.ScoringTypeCode, Model.CreateScoringTypeModelSelectListItems(Model.ScoringTypeCode))
                    </div>
                </div>
                <div class="row">
                    <div>@Html.LabelFor(m => m.MatrixRemarks)</div>
                    <div>@Html.TextAreaFor(m => m.MatrixRemarks)</div>
                </div>

                <div style="text-align: right">
                    <a href="javascript:void(0);" id="SubmitMatrixRemarksButton" class="button">Save</a>
                </div>
            }
        </fieldset>
    </div>
}

<fieldset id="CustomerFeedback">
    <legend>Customer Feedback</legend>
    <h4>Reporting</h4>
    @using (Html.BeginForm("Reporting", "ProjectAssessmentDevelopment", FormMethod.Post, new { id = "CandidateReportingForm" }))
    {
        <div id="CandidateReportingPlaceholder"></div>
    }

    <br />
    <br />
    <div style="text-align: right">
        <a href="javascript: void;" id="SubmitCandidateReportingButton" class="button">Save</a>
    </div>

    <div style="display:none;">
        <h4>Report recipients</h4>
        <div id="ProjectReportRecipientsPlaceholder"></div>
    </div>

    <!--<h4>Feedback</h4>-->
    <div id="CustomerFeedbackPlaceholder" style="margin-top:20px;"></div>
</fieldset>

<script>
    if ($("#SimulationContextId option:selected").text() == "") {
        $("#ProjectRemarks").html("<p style='margin-left:10px;font-weight:700; color: red; font-size: small;'>Context is missing</p>");
    }
    else {
        $("#ProjectRemarks").html("");
    }
</script>

<script>
    $("#SimulationContextId").change(function () {
        if ($("#SimulationContextId option:selected").text() == "") {
            $("#ProjectRemarks").html("<p style='margin-left:10px;font-weight:700; color: red; font-size: small;'>Context is missing</p>");
        }
        else {
            $("#ProjectRemarks").html("");
        }

        $('#SubmitSimulationRemarksButton').trigger('click');
    });
</script>