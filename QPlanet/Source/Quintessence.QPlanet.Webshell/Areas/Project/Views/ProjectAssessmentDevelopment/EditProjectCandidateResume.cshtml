@using Quintessence.QPlanet.Infrastructure.Nullable
@model Quintessence.QPlanet.Webshell.Areas.Project.Models.ProjectDetailControllerBase.EditProjectCandidateResumeActionModel
@{
    Layout = "~/Views/Shared/_DetailLayout.cshtml";
    ViewBag.Title = "Projects - Edit Candidate Resume";
}
@section DetailAreaNavigation
{
    <nav class="area">
        <ul>
            <!--<li class="current"><a href="javascript:void(0);">@Model.ProjectCandidate.CandidateFullName (@Model.Project.Name)</a>
            </li>-->
            <li class="current"><a href="/Project/ProjectGeneral/Edit/@Model.Project.Id" target="_blank">@Model.ProjectCandidate.CandidateFullName <u>@Model.Project.Name</u></a></li>
        </ul>
    </nav>
}
@section DetailActionNavigation
{
    <nav class="action">
        <ul>
            <li>@Html.ActionLink("Simulation Scores", "EditProjectCandidateSimulationScores", new { id = Model.ProjectCandidate.Id })
            </li>
            <li>@Html.ActionLink("Assessors Overview", "EditProjectCandidateScores", new { id = Model.ProjectCandidate.Id })
            </li>
            <li>@Html.ActionLink("Product scores", "ProjectCandidateProductScores", new { id = Model.ProjectCandidate.Id })
            </li>
            <li class="current">Resume</li>
            <li>@Html.ActionLink("Reporting", "ProjectCandidateReporting", new { id = Model.ProjectCandidate.Id })
            </li>
        </ul>
    </nav>
}
@section AdditionalScripts
{
    <script src="@Url.Content("~/Scripts/tiny_mce/jquery.tinymce.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.treeTable.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.cookie.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/persist.js")" type="text/javascript"></script>
    
    @if (Model.ProjectCandidate.ProjectCandidateDetail.IsSuperofficeAppointmentDeleted)
    {
        if (Model.ProjectCandidate.IsCancelled)
        {
            <script>
                $(function () {
                    $('a[class=button]').each(function () { $(this).hide(); });
                    AddNotification('CANCELLED', 'This candidate has been cancelled. Unable to save any changes to this scoring form.');
                });
            </script>
        }
        else
        {
            <script>
                $(function () {
                    $('a[class=button]').each(function () { $(this).hide(); });
                    AddNotification('DELETED', 'This candidate has been deleted from CRM, but has not yet been cancelled in QPlanet. Unable to save any changes to this scoring form.');
                });
            </script>
        }
    }

    <script>
        $(function () {
            InitializeTextAreas();
            InitializeButtons();
            InitializeStatementTable();
        });

        function InitializeTextAreas() {
            $('textarea').each(function () {
                $(this).tinymce({
                    script_url: '@Url.Content("~/Scripts/tiny_mce/tiny_mce.js")',
                    @if (Model.ReportDefinition.Name.Contains("NEW")) 
                    {
                        <text>height: '1000',</text>
                    }
                    else
                    {
                        <text>height: '200',</text>
                    }
                    width: '900',
                    theme: 'simple',
                    browser_spellcheck: true,
                    valid_styles : {'*' : 'font-weight,text-decoration'}
                });
            });
        }

        function InitializeButtons() {
            $('a[data-function=EditProjectCandidateResumeButton]').each(function () {
                $(this).click(function () {
                    var form = $('#EditProjectCandidateResumeForm');

                    ShowDetailSaveDialog();

                    $.ajax({
                        url: form.attr('action'),
                        type: 'POST',
                        data: form.serialize(),
                        datatype: 'JSON',
                        success: function () {
                            window.location.reload();
                        },
                        error: function (err) {
                            HideDetailSaveDialog();
                            alert(err.statusText);
                        }
                    });
                });
            });
        }
        
        function InitializeStatementTable() {
            $('#StatementTable').treeTable({ persist: true });
        }
    </script>
}

@{
    var simulations = Model.GetSimulations().ToList();
}
<fieldset>
    <legend>Resume</legend>

    <h4>Scoring summary</h4>
    <table class="dataTable">
        <thead>
            <tr>
                <th style="width: 40%">Competence</th>
                <th>Final Score</th>
                <th>Average</th>
                @foreach (var simulation in simulations)
                {
                    <th>@simulation.SimulationName</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var projectCandidateCompetenceSimulationScoreGroup in Model.ProjectCandidateCompetenceSimulationScores.GroupBy(pccss => new { pccss.DictionaryCompetenceId, pccss.DictionaryCompetenceName }))
            {
                <tr>
                    <td>
                        @projectCandidateCompetenceSimulationScoreGroup.Key.DictionaryCompetenceName
                    </td>
                    <td>
                        @{
                            if (Model.ProjectCandidateCompetenceScores != null)
                            {
                                var projectCandidateCompetenceScore = Model.ProjectCandidateCompetenceScores.SingleOrDefault(pccs => pccs.DictionaryCompetenceId == projectCandidateCompetenceSimulationScoreGroup.Key.DictionaryCompetenceId);
                                if (projectCandidateCompetenceScore != null)
                                {
                                    @projectCandidateCompetenceScore.Score.ToString("G29")
                                }
                            }
                        }
                    </td>
                    <td>
                        @{
                            var average = projectCandidateCompetenceSimulationScoreGroup.Average(pccss => pccss.Score);

                            if (average.HasValue)
                            {
                                @Math.Round(average.Value, 2).ToString("G29")
                            }
                        }
                    </td>
                    @foreach (var simulation in simulations)
                    {
                        var projectCandidateCompetenceSimulationScore = projectCandidateCompetenceSimulationScoreGroup
                            .SingleOrDefault(pccss => pccss.SimulationSetId == simulation.SimulationSetId
                                                      && pccss.SimulationDepartmentId == simulation.SimulationDepartmentId
                                                      && pccss.SimulationLevelId == simulation.SimulationLevelId
                                                      && pccss.SimulationId == simulation.SimulationId);
                        <td>
                            @(projectCandidateCompetenceSimulationScore != null ? projectCandidateCompetenceSimulationScore.Score.ToString("G29") : null)
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <br />

    @if (Model.ReportDefinition.Name == "Orientation Center")
    {
        <h4>Report texts</h4>
    }
    else
    {
        <h4>Advice</h4>
    }

    @using (Html.BeginForm("EditProjectCandidateResume", "ProjectAssessmentDevelopment", FormMethod.Post, new { id = "EditProjectCandidateResumeForm" }))
    {
        @Html.HiddenFor(m => m.ProjectCandidate.Id)
        @Html.EditorFor(m => Model.ProjectCandidateResume, "BaseEntityViewTemplate")
        <table style="width: 100%;">
            <tr class="oc-hide">
                <td style="width: 20%">Advice</td>
                <td>
                    @foreach (var advice in Model.Advices)
                    {
                        <label>
                            @Html.RadioButton(Html.IdFor(m => m.ProjectCandidateResumeAdviceId).ToString(), advice.Id, Model.ProjectCandidateResumeAdviceId == advice.Id)
                            @advice.Name
                        </label>
                        <br />
                    }
                    <div class="right-text">
                        <a href="javascript:void(0);" data-function="EditProjectCandidateResumeButton" class="button">Save</a>
                    </div>
                    <br />
                </td>
            </tr>
            <tr class="oc-hide">
                <td>
                    Reasoning<br />
                    <span style="font-weight:700;">FA/FD?</span><br />
                    <span style="font-weight:700;text-decoration:underline;">You/U-vorm</span> or <span style="font-weight:700;text-decoration:underline;">3rd person</span>
                </td>
                <td>
                    @if (Model.ReportDefinition.Name.Contains("NEW"))
                    {
                        @Html.TextAreaFor(m => m.ProjectCandidateResume.Reasoning)
                    }
                    else
                    {
                        @Html.TextAreaFor(m => m.ProjectCandidateResume.Reasoning)
                    }
                    <div class="right-text">
                        <a href="javascript:void(0);" data-function="EditProjectCandidateResumeButton" class="button">Save</a>
                    </div>
                    <br />
                </td>
            </tr>

            @if (Model.ProjectCandidateResume != null && Model.ProjectCandidateResume.ProjectCandidateResumeFields != null)
            {
                for (int i = 0; i < Model.ProjectCandidateResume.ProjectCandidateResumeFields.Count; i++)
                {
                    <tr>
                        <td>
                            @Html.EditorFor(m => Model.ProjectCandidateResume.ProjectCandidateResumeFields[i], "BaseEntityViewTemplate")
                            @Model.ProjectCandidateResume.ProjectCandidateResumeFields[i].CandidateReportDefinitionFieldName
                        </td>
                        <td>
                            @Html.TextAreaFor(m => m.ProjectCandidateResume.ProjectCandidateResumeFields[i].Statement)
                            <div class="right-text">
                                <a href="javascript:void(0);" data-function="EditProjectCandidateResumeButton" class="button">
                                    Save
                                </a>
                            </div>
                            <br />
                        </td>
                    </tr>
                }
            }
        </table>
    }

    @if (Model.ReportDefinition.Name == "Orientation Center")
    {
        <style>
            .oc-hide {
                display: none;
            }
        </style>
    }
</fieldset>
